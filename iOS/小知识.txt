
1. 掌握多门语言

2. 工作之余经常编程
	经历完整工作流程


3. 不断创新
	创新就是做一些你身边的人没有做过的事情，用来改善你的过程或产品。。。

4. 编写的软件能解决实际问题
	有一副虚构的场景：一名黑客，仅仅是出于对技术以及自己所做事情的爱，一天到晚都在编写代码。但这几乎无	助于成就一名优秀的开发者。事实上，我曾见过有些开发人员和客户争论，来采用更好但不太有助客户的技术。




http://www.myexception.cn/other/1825523.html
十大编程算法
1. 快排
2. 堆排
3. 归并排序
4. 二分查找
5. BFPRT 线性查找算法


6. DFS（深度优先搜索）
7. BFS（广度优先搜索）
8. Dijkstra算法 求最短路径
9. 动态规划 
	最优子结构 无后效性
10 朴素贝叶斯分类算法


中美印日四国程序员比较
	夸张一点地讲：日本程序员善于做领导想做的事，印度程序员善于说领导想听的话。
	美国程序员喜欢技术，甚至崇尚技术。他们的文档往往读起来很有趣，很实用（为了分享）。当然，这会让老板有时候很头疼，因为程序员不那么“听话”。他们不是给老板交差，而是要实现自己的想法，自己的设计，自己的完美。说白了，就是美国程序员有时候想法多了点。
	在技术管理上，很多国内的公司把工程师简单地作为资源，过于强调流程管理和资源管理。工程师不是高级蓝领，不能以管理生产线的方式来进行管理。
	我希望找到的人是，敢于承认自己不会的地方，但是只要会的东西，哪怕就一样，就要一定比别人理解得透，钻研得深。
	我们的程序员执行能力并不差，但在解决问题的能力上明显不足。往往需要把任务分解得很细以后才能完成，独立解决问题的能力不够。另外在表达能力上也相对差些。相信大家一定见过技术水平很高，但表达能力很差的工程师。最好笑的是，我见过不少工程师拿着一支写不出字的白板笔（我们的白板笔质量也确实不咋样），有模有样地在白板上写字。仿佛听众可以看得到他/她写得是什么。因为他/她完全沉浸在自己的逻辑中，完全不去体会听众的感受。
	

一个程序员的时间管理
http://www.myexception.cn/other/1391133.html



程序员应该关注的一些事
1. 关注你的健康
2. 提高你的数学能力 物理与微积分 离散数学
3. 提高你的英语水平
4. 一个属于自己的域名和网站
5. 一个活跃的github账号
6. 一台好的设备
7. 阅读经典的计算机科学书籍
    计算机程序的构造和解释（Structures and Interpretations of Computer Programs）
    代码大全2（Code Complete 2）
    程序员的修炼之道（Pragmatic Programmer）
    重构-改善既有代码的设计（Refactoring）
    算法导论（Introduction to Algorithms）
    离散数学及其应用（Discrete Mathematics and Its Applications）
    人月神话(Mythical Man Month)


团队中技术大拿并非越多越好
	对于依靠团队才能赢得比赛胜利的项目中明星球员都得适可而止，不是越多越好。而对于依靠单打独斗就能赢得比赛胜利的项目中明星球员越多越好。


鲜为人知的编程真相
	好的程序员花去90%的时间在思考、研究和实验，来找出最优方案。差的程序员花去90%的时间在调试问题程序、盲目的修改程序，期望某种写法能可行。
      ”一个卓越的车床工可以要求比一个一般的车床工多拿数倍高的工资，但一个卓越的软件写手的价值会10000倍于一个普通的写手。“ — — 比尔 盖茨
        编程是个很难的工作。是一种剧烈的脑力劳动。好的程序员7×24小时的思考他们的工作。他们最重要的程序都是在淋浴时、睡梦中写成的。因为这最重要的工作都是在远离键盘的情况下完成的，所以软件工程不可能通过增加在办公室的工作时间或增加人手来加快进度。
	伟大的程序员只花很少的时间去写代码 — — 至少指那些最终形成产品的代码。那些要花掉大量时间写代码的程序员都是太懒惰，太自大，太傲慢，不屑用现有的方案去解决老问题。伟大的程序员的精明之处在 于懂得欣赏和重复利用通用模式。好的程序员并不害怕经常的重构（重写）他们的代码以求达到最好效果。差的程序员写的代码缺乏整体概念，冗余，没有层次，没 有模式，导致很难重构。把这些代码扔掉重做也比修改起来容易。


那些最受争议的编程观点
1. 业余时间不会为了好玩而编程的程序员，永远比不上那些以编程为乐的同学。
2. 单元测试无助于编写优秀代码。
3. 唯一能放之四海而皆准的最佳实践，是“用脑子思考”。
4. 程序员不是生而平等的。
5. 依赖Google没什么错
6. 偶尔写写垃圾代码也无妨。
7. SQL也是代码，请等而视之。
8. UML图被高估了
9. 可读性是代码最重要的方面
10. 软件开发只是一份工作而已
11. 设计模式弊大于利。
	软件设计，尤其是好的软件设计千变万化，没法有意义地用模式去总结，尤其是那些大家记得住的几个模式，而且这些模式也太抽象了，其实没几个人真正记得住太多。所以设计模式其实没啥用。而另一方面呢，又有太多的人为设计模式的概念迷住，想方设法到处用——结果代码中往往除了一些毫无意义的单例和抽象工厂之外，几乎找不到什么设计。

12.  代码少少益善。
如果用户看不到你的工作，才是做对了。荣耀在别处

13. 性能真的很重要

14. 单元测试无助于编写好代码，软件工程大多数所谓的最佳实践都是为了防范烂程序员搞太多破坏

15. 大多数职业程序员都很烂
 
16. 软件工程的既定思维反而会阻碍你做出伟大作品

17. 纯函数式编程没啥用。但在命令式代码里杂用一些效果不错



大量应用程序在手机中发生的意外或故意占用事件，是造成Android手机越来越慢的最核心原因
